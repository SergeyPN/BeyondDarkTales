<?xml version="1.0" encoding="utf-8"?>
<root xmlns:android="http://schemas.android.com/apk/res/android">

<!--
 Copyright (C) 2022 Andrey Kharitonov. All Rights Reserved.
-->

  <androidManifestUpdates>
	<!-- optional geotargeting -->
	<addPermissionn android:name="android.permission.ACCESS_COARSE_LOCATION"/>
  </androidManifestUpdates>
		
  <buildGradleAdditions>
	<insert>
    dependencies {
    implementation 'com.yandex.android:mobmetricalib:5.0.1'
    }

    allprojects {
    def classMap = [
    'android.support.annotation': 'androidx.annotation',
    'android.support.v4.app.ActivityCompat': 'androidx.core.app.ActivityCompat',
    'android.support.v4.app.NotificationCompat': 'androidx.core.app.NotificationCompat',
    'android.support.v4.app.NotificationManagerCompat': 'androidx.core.app.NotificationManagerCompat',
    'android.support.v4.content.ContextCompat': 'androidx.core.content.ContextCompat',
    'android.support.v4.content.FileProvider': 'androidx.core.content.FileProvider',
    'android.support.v13.app.FragmentCompat': 'androidx.legacy.app.FragmentCompat',
    'android.arch.lifecycle': 'androidx.lifecycle',
    'android.arch.lifecycle.Lifecycle': 'androidx.lifecycle.Lifecycle',
    'android.arch.lifecycle.LifecycleObserver': 'androidx.lifecycle.LifecycleObserver',
    'android.arch.lifecycle.OnLifecycleEvent': 'androidx.lifecycle.OnLifecycleEvent',
    'android.arch.lifecycle.ProcessLifecycleOwner': 'androidx.lifecycle.ProcessLifecycleOwner',
    ]

    afterEvaluate { project ->
    project.rootProject.projectDir.traverse(type: groovy.io.FileType.FILES, nameFilter: ~/.*\.java$/) { f ->
    classMap.each { entry ->
    if (f.getText('UTF-8').contains(entry.key)) {
    println "Change ${entry.key} to ${entry.value} in file ${f}"
    ant.replace(file: f, token: entry.key, value: entry.value)
    }
    }
    }
    }
    }

  </insert>
  </buildGradleAdditions>


  <gradleProperties>
    <insert>
      <!-- Android X -->
      android.useAndroidX=true
      android.enableJetifier=true
    </insert>
  </gradleProperties>

  <proguardAdditions>
		<insert>
		</insert>
	</proguardAdditions>
	
 	<resourceCopies>			
	</resourceCopies>

	<gameActivityImportAdditions>
		<insert>
      import com.yandex.metrica.YandexMetricaConfig;
      import com.yandex.metrica.YandexMetrica;
      import com.yandex.metrica.profile.UserProfile;
      import com.yandex.metrica.profile.GenderAttribute;
      import com.yandex.metrica.profile.Attribute;
    </insert>
	</gameActivityImportAdditions>

	<gameActivityClassAdditions>
		<insert>
      // String YaRepParams = "{\"name\":\"Alice\", \"age\":\"18\"}";
      public void AndroidThunkJava_YandexAppMetrica_ReportEvent(String YaRepEvent, String YaRepParams)
      {
      YandexMetrica.reportEvent(YaRepEvent, YaRepParams);
      }

      public void AndroidThunkJava_YandexAppMetrica_SendEventsBuffer()
      {
      YandexMetrica.sendEventsBuffer();
      }

      public void AndroidThunkJava_YandexAppMetrica_SendProfileAttributes(String pUserProfileID, String pName, int pGender, int pAge, boolean pNotifications)
      {
      UserProfile userProfile = UserProfile.newBuilder()
      // Updating predefined attributes.
      .apply(Attribute.name().withValue(pName))
      .apply(Attribute.gender().withValue(GenderAttribute.Gender.values()[pGender]))
      .apply(Attribute.birthDate().withAge(pAge))
      .apply(Attribute.notificationsEnabled().withValue(pNotifications))
      .build();
      // Setting the ProfileID using the method of the YandexMetrica class.
      YandexMetrica.setUserProfileID(pUserProfileID);

      // Sending the UserProfile instance.
      YandexMetrica.reportUserProfile(userProfile);
      }
    </insert>		
	</gameActivityClassAdditions>
	
	<gameActivityOnCreateAdditions>
		<setStringFromProperty	result="YandexAppKey" ini="Engine" section="/Script/YandexAppMetrica.YandexAppMetricaSettings" 				property="YandexAppKey" default="0"/>
		<setIntFromProperty 	result="YandexAppSessionTimeout" ini="Engine" section="/Script/YandexAppMetrica.YandexAppMetricaSettings"	property="YandexAppSessionTimeout" default="0"/>
		<insert>
		
		YandexMetricaConfig config = YandexMetricaConfig.newConfigBuilder("</insert><insertValue value="$S(YandexAppKey)"/><insert>").withSessionTimeout(</insert><insertValue value="$I(YandexAppSessionTimeout)"/><insert>).build();
		YandexMetrica.activate(getApplicationContext(), config);
		YandexMetrica.enableActivityAutoTracking(getApplication());

		</insert>
	</gameActivityOnCreateAdditions>
	
	
	<gameActivityOnPauseAdditions>
	</gameActivityOnPauseAdditions>

	<gameActivityOnResumeAdditions>
	</gameActivityOnResumeAdditions>
</root>
